enum EnumUnoCardColor {
    RED, YELLOW, BLUE, GREEN, BLANK # 万能牌花色
}

enum EnumUnoCardType {
    N1, N2, N3, N4, N5, N6, N7, N8, N9, N0, SKIP, REVERSE, WILD, ADD2, ADD4
}

enum EnumGameDirection {
    clockwise, anticlockwise # 顺时针, 逆时针
}

enum EnumGameAction {
    # 玩家行动: 抽牌, 出牌, 跳过, 展示第一张牌 可以根据行动更新界面
    drawCard, sendCard, skipTurn, showFirstCard
}

enum EnumGamePlayerStatus {
    # 当前回合与下一回合均不是玩家出牌
    watching
    # 玩家当前回合出牌
    onTurns
    # 玩家下回合出牌
    nextTurns
    # 如果玩家出卡错误，则返回这个消息要求玩家重新出卡
    retryOnTurns
    gameOverFailed
    gameOverSuccess
}

##### 游戏相关

type GameCard {
    cardType: EnumUnoCardType!
    cardColor: EnumUnoCardColor!
    cardID: Int!
}

# 实体类先用上面这个, 应该是一样的
input GameCardInput {
    cardType: EnumUnoCardType!
    cardColor: EnumUnoCardColor!
}

type GamePlayerInfo {
    who: PlayerInfo!
    cards: [GameCard]!
}

# 指示玩家执行某个动作, 执行了几次
type GamePlayerAction {
    who: String!
    action: EnumGameAction!
    actionTimes: Int
}

type GameTurnsFeedback {
    # 所有玩家的状态(包括自己)
    playerStatus: [GamePlayerState!]!
    # 自己的手牌详细信息
    yourGameInfo: GamePlayerInfo!
    # 上一张打出的牌
    lastCard: GameCard
    # 玩家行动(抽牌, 跳过, 出牌)
    playerActions: [GamePlayerAction!]!
}

# 游戏内玩家状态
type GamePlayerState {
    playerName: String!
    state: EnumGamePlayerStatus!
    # 游戏分数, 首先打完手牌为赢家, 其余玩家按照手牌分数总合倒序排名, 数字牌按牌面计算, 功能牌20, 万能牌50
    totalScore: Int!
    # 是否说Uno
    sayUno: Boolean!
    # 剩余卡牌数量
    remainingCardCnt: Int!
}

type GameSettings {
    players: [PlayerInfo]!
    roomInfo: RoomInfo
}